import numpy as np
import matplotlib.pyplot as plt

# Linear Congruential Generator function
def lcg(seed, a=1664525, c=1013904223, m=2**32, n=1000000):
    x = seed
    numbers = []
    for _ in range(n):
        x = (a * x + c) % m
        numbers.append(x / m)  # Normalize to [0, 1)
    return np.array(numbers)

# Generate pseudorandom numbers
n_samples = 10000000  # 1 billion samples
seed1 = 42
seed2 = 12345

# Distribution of pseudorandom numbers
random_numbers = lcg(seed1, n=n_samples)

# Plot the distribution
plt.figure(figsize=(12, 6))
plt.hist(random_numbers, bins=50, density=True, alpha=0.5, color='lightblue', edgecolor='black')
plt.title('Distribution of Pseudorandom Numbers Generated by LCG')
plt.xlabel('Value (normalized to [0, 1))')
plt.ylabel('Frequency')
# plt.grid()
plt.show()

# Generate two sets of pseudorandom numbers for 2D scatter plot
random_numbers_x = lcg(seed1, n=1000)
random_numbers_y = lcg(seed2, n=1000)

# Plot the 2D scatter plot
plt.figure(figsize=(12, 6))
plt.scatter(random_numbers_x, random_numbers_y, alpha=0.5, color='green')
plt.title('2D Scatter Plot of Pseudorandom Numbers from LCG')
plt.xlabel('Random Numbers (Seed 1)')
plt.ylabel('Random Numbers (Seed 2)')
plt.grid()
plt.show()
